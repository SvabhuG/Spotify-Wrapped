from django.shortcuts import render

# Create your views here.
from django.shortcuts import redirect, render, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import SpotifyProfile, SpotifyWrap
from spotipy import Spotify
from spotipy.oauth2 import SpotifyOAuth
from django.conf import settings
import json

# Configure SpotifyOAuth for authentication and data access
sp_oauth = SpotifyOAuth(
    client_id=settings.SPOTIPY_CLIENT_ID,
    client_secret=settings.SPOTIPY_CLIENT_SECRET,
    redirect_uri=settings.SPOTIPY_REDIRECT_URI,
    scope="user-top-read user-read-recently-playegit d user-library-read"
)


@login_required
def spotify_connect(request):
    """
    Initiates the Spotify OAuth connection process.

    Generates an authorization URL for Spotify's OAuth process and redirects
    the user to that URL to allow access to their Spotify account.

    Args:
        request: The HTTP request object.

    Returns:
        HttpResponseRedirect: Redirects the user to Spotify's OAuth page.
    """
    auth_url = sp_oauth.get_authorize_url()
    return redirect(auth_url)


@login_required
def spotify_callback(request):
    """
    Handles the callback after Spotify authentication.

    Retrieves the authorization code from Spotify's response, exchanges it
    for an access token, and saves or updates the user's Spotify profile in
    the database.

    Args:
        request: The HTTP request object.

    Returns:
        HttpResponseRedirect: Redirects to the 'generate_wrap' view on success.
        HttpResponse: Renders an error page if authentication fails.
    """
    code = request.GET.get('code')
    token_info = sp_oauth.get_access_token(code)

    if token_info:
        sp = Spotify(auth=token_info['access_token'])
        spotify_id = sp.current_user()['id']

        # Save or update the user's Spotify profile
        profile, created = SpotifyProfile.objects.get_or_create(
            user=request.user,
            defaults={
                'spotify_id': spotify_id,
                'access_token': token_info['access_token'],
                'refresh_token': token_info['refresh_token']
            }
        )

        if not created:
            profile.access_token = token_info['access_token']
            profile.refresh_token = token_info['refresh_token']
            profile.save()

        return redirect('generate_wrap')

    return render(request, 'error.html')


@login_required
def generate_wrap(request):
    """
    Generates a personalized Spotify wrap for the logged-in user.

    Retrieves the user's Spotify data (top tracks, artists, genres, and
    recently played tracks), processes it into a structured format, saves it
    in the database, and renders it on the 'wrap.html' page.

    Args:
        request: The HTTP request object.

    Returns:
        HttpResponse: Renders the 'wrap.html' template with the generated wrap data.
    """
    profile = SpotifyProfile.objects.get(user=request.user)
    sp = Spotify(auth=profile.access_token)

    # Fetch user data from Spotify
    top_tracks = sp.current_user_top_tracks(limit=10, time_range="long_term")['items']
    top_artists = sp.current_user_top_artists(limit=5, time_range="long_term")['items']
    top_genres = list(set(genre for artist in top_artists for genre in artist['genres']))
    recently_played = sp.current_user_recently_played(limit=10)['items']

    # Prepare data for the wrap
    wrap_data = {
        "top_tracks": [{"name": track['name'], "artist": track['artists'][0]['name']} for track in top_tracks],
        "top_artists": [{"name": artist['name']} for artist in top_artists],
        "top_genres": top_genres,
        "recently_played": [
            {"track": item['track']['name'], "artist": item['track']['artists'][0]['name']}
            for item in recently_played
        ]
    }

    # Save the wrap data to the database
    wrap = SpotifyWrap(user=request.user, data=wrap_data)
    wrap.save()

    return render(request, 'wrap.html', {'wrap_data': wrap_data})


@login_required
def wrap_history(request):
    """
    Displays a list of all wraps generated by the logged-in user.

    Fetches wraps from the database, ordered by creation date, and renders
    them on the 'history.html' page.

    Args:
        request: The HTTP request object.

    Returns:
        HttpResponse: Renders the 'history.html' template with the list of wraps.
    """
    wraps = SpotifyWrap.objects.filter(user=request.user).order_by('-created_at')
    return render(request, 'history.html', {'wraps': wraps})

@login_required
def replay_wrap(request, wrap_id):
    """
    Fetches and replays a specific Spotify wrap for the logged-in user.

    This view retrieves a previously saved Spotify wrap based on its unique ID
    and renders it using the `wrap.html` template. The view ensures that only
    the logged-in user can access their wraps and no other user's data.

    Args:
        request (HttpRequest): The HTTP request object containing metadata about the request.
        wrap_id (int): The ID of the Spotify wrap to be replayed.

    Returns:
        HttpResponse: A rendered `wrap.html` page displaying the saved wrap data.

    Raises:
        Http404: If the specified wrap does not exist or does not belong to the logged-in user.

    Usage:
        This view is accessed via a URL pattern like `/wraps/replay/<wrap_id>/`,
        where `<wrap_id>` is the ID of the wrap to replay.
    """
    wrap = get_object_or_404(SpotifyWrap, id=wrap_id, user=request.user)
    wrap_data = wrap.data  # Access the saved wrap data
    return render(request, 'wrap.html', {'wrap_data': wrap_data})

